(()=>{"use strict";var e,t,i={586:(e,t,i)=>{i(177);class s{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;this.boardSize=e,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[],this.escListener=null}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error('Контейнер не является элементом "HTMLElement"');this.container=e}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),document.addEventListener("keydown",(e=>this.onEsc(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.setAttribute("style",`grid-template-columns: repeat(${this.boardSize}, 1fr)`),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const s=document.createElement("div");s.classList.add("cell","map-tile","map-tile-"+(t=e,i=this.boardSize,0===t?"top-left":t>0&&t<i-1?"top":t===i-1?"top-right":t===i*i-1?"bottom-right":t>i*(i-1)&&t<i*i-1?"bottom":t%i==i-1?"right":t===i*(i-1)?"bottom-left":t%i==0?"left":"center")),s.addEventListener("mouseenter",(e=>this.onCellEnter(e))),s.addEventListener("mouseleave",(e=>this.onCellLeave(e))),s.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(s)}var t,i;this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const i of e){const e=this.boardEl.children[i.position],s=document.createElement("div");s.classList.add("character",i.character.type);const r=document.createElement("div");r.classList.add("health-level");const a=document.createElement("div");a.classList.add("health-level-indicator","health-level-indicator-"+((t=i.character.health)<15?"critical":t<50?"normal":"high")),a.style.width=`${i.character.health}%`,r.appendChild(a),s.appendChild(r),e.appendChild(s)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}addEscListener(e){this.escListener=e}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}onEsc(e){"Escape"===e.key&&(e.preventDefault(),this.escListener())}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}deselectAll(){const{cells:e}=this;e.forEach((t=>this.deselectCell(e.indexOf(t))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((i=>{const s=this.cells[e],r=document.createElement("span");r.textContent=t,r.classList.add("damage"),s.appendChild(r),r.addEventListener("animationend",(()=>{s.removeChild(r),i()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("Игровой процесс не привязан к DOM")}}const r="prairie",a="desert",n="arctic",o="mountain",l="auto",c="pointer",h="crosshair",d="not-allowed";class u{static from(e){return"object"==typeof e?{level:e.level,positions:e.positionsToDraw,theme:e.theme,score:e.score}:null}}class p{constructor(){this.characters=new Set}add(e){this.characters.add(e)}addAll(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];for(const e of t)this.characters.add(e)}toArray(){this.characters=Array.from(this.characters)}}function f(e,t,i){const s=function*(e,t){for(;;){const i=Math.floor(Math.random()*e.length),s=Math.ceil(Math.random()*t);yield{character:new e[i](s),level:s}}}(e,t),r=new p;for(let e=0;e<i;e+=1){const e=s.next().value;r.add(e.character)}return r.toArray(),r.characters}class m{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,"Character"===new.target.name)throw new Error("Данный класс нельзя использовать для создания персонажа")}}class g{constructor(e,t,i){if(!(e instanceof m))throw new Error("character must be instance of Character or its children");if("number"!=typeof i)throw new Error("position must be a number");this.character=e,this.side=t,this.position=i}}class v extends m{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"bowman"),this.attack=25,this.defence=25,this.distance=2,this.distanceAttack=2}}class y extends m{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"daemon"),this.attack=10,this.defence=10,this.distance=1,this.distanceAttack=4}}class w extends m{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"undead"),this.attack=40,this.defence=10,this.distance=4,this.distanceAttack=1}}class b extends m{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"vampire"),this.attack=25,this.defence=25,this.distance=2,this.distanceAttack=2}}class E extends m{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"magician"),this.attack=10,this.defence=40,this.distance=1,this.distanceAttack=4}}class P extends m{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"swordsman"),this.attack=40,this.defence=10,this.distance=4,this.distanceAttack=1}}const k=new s;k.bindToDOM(document.querySelector("#game-container"));const S=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),C=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.sides={player:{name:"player",first:0,second:1,characters:[P,v,E]},enemy:{name:"enemy",first:this.gamePlay.boardSize-1,second:this.gamePlay.boardSize-2,characters:[w,b,y]}},this.level=1,this.score=0,this.attacks=[],this.statuses={freespace:"free space",enemy:"enemy",allied:"allied",notallowed:"notallowed"},this.movements=[],this.selected=null,this.currentStatus=null,this.positionsToDraw=[],this.area=this.getRowArray()}init(){document.addEventListener("DOMContentLoaded",(()=>{const e=JSON.parse(sessionStorage.getItem("reload"));e?this.loadState(e):(this.theme=r,this.gamePlay.drawUi(this.theme))})),this.gamePlay.addCellClickListener(this.onCellClick.bind(this)),this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)),this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)),this.gamePlay.addEscListener(this.onEsc.bind(this)),this.gamePlay.addNewGameListener(this.newGame.bind(this,this.level,this.theme)),this.gamePlay.addSaveGameListener(this.saveGame.bind(this)),this.gamePlay.addLoadGameListener(this.loadGame.bind(this)),window.addEventListener("unload",(()=>{sessionStorage.setItem("reload",JSON.stringify(u.from(this)))}))}positions(){const e=[];for(let t=0;t<this.gamePlay.boardSize**2;t+=1)e.push(t);return{array:e,lineLength:this.gamePlay.boardSize,length:e.length}}sidePositions(e){const t=this.positions();return t.array.filter((i=>i%t.lineLength===e.first||i%t.lineLength===e.second)).map((e=>e))}newGame(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r;this.level=e,this.gamePlay.deselectAll(),this.selected=null,this.theme=t,this.gamePlay.drawUi(this.theme),1===e&&(this.positionsToDraw=[]);const i=this.sidePositions(this.sides.player),s=this.sidePositions(this.sides.enemy);function a(e){const t=Math.floor(Math.random()*e.length),i=e[t];return e.splice(t,1),i}if(this.positionsToDraw.length){this.positionsToDraw.forEach((e=>{e.position=a(i)}));const t=this.sidePositions(this.sides.player).filter((e=>!this.positionsToDraw.find((t=>t.position===e)))),r=this.positionsToDraw.length;let n;2===e&&(n=f(this.sides.player.characters,e-1,1)),3!==e&&4!==e||(n=f(this.sides.player.characters,e-1,2));const o=f(this.sides.enemy.characters,e,n.length+r);this.positionsToDraw.push(n.map((e=>new g(e,this.sides.player.name,a(t))))),this.positionsToDraw.push(o.map((e=>new g(e,this.sides.enemy.name,a(s))))),this.positionsToDraw=this.positionsToDraw.flat()}else{const t=f([P,v],e,2),r=f(this.sides.enemy.characters,e,2);this.positionsToDraw=[t.map((e=>new g(e,this.sides.player.name,a(i)))),r.map((e=>new g(e,this.sides.enemy.name,a(s))))].flat()}this.gamePlay.redrawPositions(this.positionsToDraw)}saveGame(){if(this.positionsToDraw.length){const e=u.from(this);this.stateService.save(e),s.showMessage("Игра успешно сохранена!")}else s.showError("ВНИМАНИЕ! Нет игры для сохранения!")}loadGame(){const e=this.stateService.load();e?(this.loadState(e),s.showMessage("Игра успешно загружена!")):s.showError("ВНИМАНИЕ! Нет игры для загрузки!")}loadState(e){this.gamePlay.deselectAll(),this.selected=null;const{level:t,positions:i,theme:s,score:r}=e;this.level=t,this.positionsToDraw=i,this.theme=s,this.score=r,this.gamePlay.drawUi(this.theme),this.gamePlay.redrawPositions(this.positionsToDraw)}onEsc(){this.clear(),this.score=0,this.gamePlay.drawUi(this.theme)}clear(){this.level=1,this.positionsToDraw=[],this.selected=null,this.theme=r}levelUp(){switch(this.level+=1,this.positionsToDraw.forEach((e=>{e.character.level=this.level,e.character.attack=Math.ceil(Math.max(e.character.attack,e.character.attack*(1.8-(1===e.character.health?80:e.character.health)/100))),e.character.defence=Math.ceil(Math.max(e.character.defence,e.character.defence*(1.8-(1===e.character.health?80:e.character.health)/100))),e.character.health=Math.ceil(e.character.health+80>100?100:e.character.health+80)})),this.level){case 2:this.gamePlay.drawUi(a),this.theme=a;break;case 3:this.gamePlay.drawUi(n),this.theme=n;break;case 4:this.gamePlay.drawUi(o),this.theme=o;break;default:this.gamePlay.drawUi(r),this.theme=r}return this.level}getRowArray(){const e=[];let t=[];for(let i=0;i<this.gamePlay.boardSize**2;i+=1)t.push(i),t.length===this.gamePlay.boardSize&&(e.push(t),t=[]);return e}getAreaMove(e,t){const{boardSize:i}=this.gamePlay,s=e.position%i,r=Math.floor(e.position/i),a=[];for(let e=1;e<=t;e+=1){let t=s+e;t<i&&a.push(this.area[r][t]);let n=r+e;n<i&&a.push(this.area[n][s]),n<i&&t<i&&a.push(this.area[n][t]),t=s-e,t>=0&&a.push(this.area[r][t]),t>=0&&n<i&&a.push(this.area[n][t]),n=r-e,n>=0&&a.push(this.area[n][s]),n>=0&&t>=0&&a.push(this.area[n][t]),t=s+e,t<i&&n>=0&&a.push(this.area[n][t])}return a}getAreaAttack(e,t){const i=[];for(let s=e.position-this.gamePlay.boardSize*t;s<=e.position+this.gamePlay.boardSize*t;s+=this.gamePlay.boardSize)if(s>=0&&s<this.gamePlay.boardSize**2)for(let e=s-t;e<=s+t;e+=1)e>=s-s%this.gamePlay.boardSize&&e<s+(this.gamePlay.boardSize-s%this.gamePlay.boardSize)&&i.push(e);return i.splice(i.indexOf(e.position),1),i}moveDefending(e,t,i){const s=this.getAreaMove(e,e.character.distance).filter((e=>-1===this.positionsToDraw.findIndex((t=>t.position===e)))),r=e=>({x:e.position%this.gamePlay.boardSize,y:Math.floor(e.position/this.gamePlay.boardSize)}),a=r(e),n=r(t),o=()=>n.x<=a.x?n.y<=a.y?s.filter((e=>e%this.gamePlay.boardSize>=n.x&&e%this.gamePlay.boardSize<=a.x&&Math.floor(e/this.gamePlay.boardSize)<=a.y&&Math.floor(e/this.gamePlay.boardSize)>=n.y)):s.filter((e=>e%this.gamePlay.boardSize>=n.x&&e%this.gamePlay.boardSize<=a.x&&Math.floor(e/this.gamePlay.boardSize)>a.y&&Math.floor(e/this.gamePlay.boardSize)<=n.y)):n.y<=a.y?s.filter((e=>e%this.gamePlay.boardSize<=n.x&&e%this.gamePlay.boardSize>a.x&&Math.floor(e/this.gamePlay.boardSize)<=a.y&&Math.floor(e/this.gamePlay.boardSize)>=n.y)):s.filter((e=>e%this.gamePlay.boardSize<=n.x&&e%this.gamePlay.boardSize>a.x&&Math.floor(e/this.gamePlay.boardSize)>a.y&&Math.floor(e/this.gamePlay.boardSize)<=n.y)),l=o();if(!l.length){if(!s.length){const t=[...i];t.splice(i.indexOf(e),1),e=t[Math.floor(Math.random()*t.length)]}const t=this.getAreaMove(e,e.character.distance).filter((e=>-1===this.positionsToDraw.findIndex((t=>t.position===e))));return t[Math.floor(Math.random()*t.length)]}return l[Math.floor(Math.random()*o.length)]}moveEnemyAttack(){this.gamePlay.deselectAll();const e=this.positionsToDraw.filter((e=>e.side===this.sides.enemy.name)),t=e.find((t=>t.character.attack===Math.max.apply(null,e.map((e=>e.character.attack)))));return new Promise(((i,s)=>{const r=Math.round(Math.max(t.character.attack-this.selected.character.defence,.1*t.character.attack));this.getAreaAttack(t,t.character.distanceAttack).find((e=>e===this.selected.position))?(this.selected.character.health-=r,i(r)):s({enemyAttacker:t,enemies:e})}))}onCellClick(e){function t(){(this.selected<=0||this.selected.character.health<=0)&&this.positionsToDraw.splice(this.positionsToDraw.indexOf(this.selected),1),this.gamePlay.redrawPositions(this.positionsToDraw),this.selected=null,this.positionsToDraw.find((e=>e.side===this.sides.player.name))||(s.showMessage("Игра окончена!"),this.clear(),this.score=0,this.gamePlay.drawUi(this.theme))}const i=this.positionsToDraw.find((t=>t.position===e));if(null===this.selected)i&&(["bowman","swordsman","magician"].includes(i.character.type)?(this.selected=i,this.gamePlay.selectCell(e)):s.showError("Это персонаж противника!"));else if(this.currentStatus===this.statuses.freespace)[this.selected.position,e].forEach((e=>this.gamePlay.deselectCell(e))),this.selected.position=e,this.gamePlay.redrawPositions(this.positionsToDraw),this.moveEnemyAttack().then((e=>this.gamePlay.showDamage(this.selected.position,e)),(e=>{e.enemyAttacker.position=this.moveDefending(e.enemyAttacker,this.selected,e.enemies)})).then(t.bind(this));else if(this.currentStatus===this.statuses.allied&&this.selected!==i)this.gamePlay.deselectCell(this.selected.position),this.selected=i,this.gamePlay.selectCell(e);else if(this.currentStatus===this.statuses.enemy){const i=this.positionsToDraw.find((t=>t.position===e)),r=Math.ceil(Math.max(this.selected.character.attack-i.character.defence,.1*this.selected.character.attack));i.character.health-=r,i.character.health<=0?(this.positionsToDraw.splice(this.positionsToDraw.indexOf(i),1),this.gamePlay.redrawPositions(this.positionsToDraw),this.gamePlay.deselectAll(),this.positionsToDraw.find((e=>e.side===this.sides.enemy.name))?this.moveEnemyAttack().then((e=>this.gamePlay.showDamage(this.selected.position,e)),(e=>{e.enemyAttacker.position=this.moveDefending(e.enemyAttacker,this.selected,e.enemies)})).then(t.bind(this)):(this.selected=null,this.score=this.positionsToDraw.reduce(((e,t)=>e+t.character.health),this.score),4===this.level?(s.showMessage(`Победа! Ваш счет равен ${this.score}.`),this.clear(),this.gamePlay.drawUi(this.theme)):(s.showMessage(`Победа! Переход на уровень ${this.level+1}! Ваш счет равен ${this.score}.`),this.newGame(this.levelUp(),this.theme)))):this.gamePlay.showDamage(e,r).then((()=>this.gamePlay.redrawPositions(this.positionsToDraw))).then((()=>this.moveEnemyAttack())).then((e=>this.gamePlay.showDamage(this.selected.position,e)),(e=>{e.enemyAttacker.position=this.moveDefending(e.enemyAttacker,this.selected,e.enemies)})).then(t.bind(this))}else s.showError("Это действие запрещено!"),this.gamePlay.deselectCell(this.selected.position),this.selected=null}onCellEnter(e){if(this.positionsToDraw.forEach((t=>{t.position===e&&this.gamePlay.showCellTooltip(function(e){const t=String.fromCodePoint(127894),i=String.fromCodePoint(9876),s=String.fromCodePoint(128737),r=String.fromCodePoint(10084);return`${t}${e.level} ${i}${e.attack} ${s}${e.defence} ${r}${e.health}`}(t.character),e)})),this.selected){const t={distance:this.selected.character.distance,distanceAttack:this.selected.character.distanceAttack};this.movements=this.getAreaMove(this.selected,t.distance).filter((e=>-1===this.positionsToDraw.findIndex((t=>t.position===e)))),this.attacks=this.getAreaAttack(this.selected,t.distanceAttack).filter((e=>-1===this.positionsToDraw.findIndex((t=>t.position===e&&t.side===this.sides.player.name)))),this.movements.includes(e)?(this.gamePlay.selectCell(e,"green"),this.gamePlay.setCursor(c),this.currentStatus=this.statuses.freespace):this.attacks.includes(e)&&this.positionsToDraw.filter((e=>e.side===this.sides.enemy.name)).find((t=>t.position===e))?(this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(h),this.currentStatus=this.statuses.enemy):this.positionsToDraw.filter((e=>e.side===this.sides.player.name)).find((t=>t.position===e&&t.position!==this.selected.position))?(this.gamePlay.setCursor(c),this.currentStatus=this.statuses.allied):(this.gamePlay.setCursor(d),this.currentStatus=this.statuses.notallowed)}else this.positionsToDraw.filter((e=>e.side===this.sides.player.name)).find((t=>t.position===e))?this.gamePlay.setCursor(c):this.gamePlay.setCursor(l)}onCellLeave(e){this.gamePlay.hideCellTooltip(e),e===this.selected&&e===this.selected.position||this.gamePlay.deselectCell(e)}}(k,S);C.init()},783:(e,t,i)=>{var s=i(618),r=Object.create(null),a="undefined"==typeof document,n=Array.prototype.forEach;function o(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(h(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var i=e.cloneNode();i.isLoaded=!1,i.addEventListener("load",(function(){i.isLoaded||(i.isLoaded=!0,e.parentNode.removeChild(e))})),i.addEventListener("error",(function(){i.isLoaded||(i.isLoaded=!0,e.parentNode.removeChild(e))})),i.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(i,e.nextSibling):e.parentNode.appendChild(i)}}function c(){var e=document.querySelectorAll("link");n.call(e,(function(e){!0!==e.visited&&l(e)}))}function h(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(a)return console.log("no window.document found, will not HMR CSS"),o;var i,d,u=function(e){var t=r[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var i=document.getElementsByTagName("script"),a=i[i.length-1];a&&(t=a.src)}r[e]=t}return function(e){if(!t)return null;var i=t.split(/([^\\/]+)\.js$/),r=i&&i[1];return r&&e?e.split(",").map((function(e){var i=new RegExp("".concat(r,"\\.js$"),"g");return s(t.replace(i,"".concat(e.replace(/{fileName}/g,r),".css")))})):[t.replace(".js",".css")]}}(e);return i=function(){var e=u(t.filename),i=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),i=!1;return n.call(t,(function(t){if(t.href){var r=function(e,t){var i;return e=s(e),t.some((function(s){e.indexOf(t)>-1&&(i=s)})),i}(t.href,e);h(r)&&!0!==t.visited&&r&&(l(t,r),i=!0)}})),i}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();i?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},50,d=0,function(){var e=this,t=arguments;clearTimeout(d),d=setTimeout((function(){return i.apply(e,t)}),50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",i=e.replace(new RegExp(t,"i"),"").split("/"),s=i[0].toLowerCase().replace(/\.$/,"");return i[0]="",t+s+i.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,i)=>{var s=i(783)(e.id,{locals:!1});e.hot.dispose(s),e.hot.accept(void 0,s)}},s={};function r(e){var t=s[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var a=s[e]={id:e,exports:{}};try{var n={id:e,module:a,factory:i[e],require:r};r.i.forEach((function(e){e(n)})),a=n.module,n.factory.call(a.exports,a,a.exports,n.require)}catch(e){throw a.error=e,e}return a.exports}r.m=i,r.c=s,r.i=[],r.hu=e=>e+"."+r.h()+".hot-update.js",r.miniCssF=e=>{},r.hmrF=()=>"main."+r.h()+".hot-update.json",r.h=()=>"a03e671111e5d258e987",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="diploma-advantage-js-retrogame:",r.l=(i,s,a,n)=>{if(e[i])e[i].push(s);else{var o,l;if(void 0!==a)for(var c=document.getElementsByTagName("script"),h=0;h<c.length;h++){var d=c[h];if(d.getAttribute("src")==i||d.getAttribute("data-webpack")==t+a){o=d;break}}o||(l=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,r.nc&&o.setAttribute("nonce",r.nc),o.setAttribute("data-webpack",t+a),o.src=i),e[i]=[s];var u=(t,s)=>{o.onerror=o.onload=null,clearTimeout(p);var r=e[i];if(delete e[i],o.parentNode&&o.parentNode.removeChild(o),r&&r.forEach((e=>e(s))),t)return t(s)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=u.bind(null,o.onerror),o.onload=u.bind(null,o.onload),l&&document.head.appendChild(o)}},(()=>{var e,t,i,s={},a=r.c,n=[],o=[],l="idle",c=0,h=[];function d(e){l=e;for(var t=[],i=0;i<o.length;i++)t[i]=o[i].call(null,e);return Promise.all(t)}function u(){0==--c&&d("ready").then((function(){if(0===c){var e=h;h=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return d("check").then(r.hmrM).then((function(i){return i?d("prepare").then((function(){var s=[];return t=[],Promise.all(Object.keys(r.hmrC).reduce((function(e,a){return r.hmrC[a](i.c,i.r,i.m,e,t,s),e}),[])).then((function(){return t=function(){return e?m(e):d("ready").then((function(){return s}))},0===c?t():new Promise((function(e){h.push((function(){e(t())}))}));var t}))})):d(g()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+l+")")})):m(e)}function m(e){e=e||{},g();var s=t.map((function(t){return t(e)}));t=void 0;var r=s.map((function(e){return e.error})).filter(Boolean);if(r.length>0)return d("abort").then((function(){throw r[0]}));var a=d("dispose");s.forEach((function(e){e.dispose&&e.dispose()}));var n,o=d("apply"),l=function(e){n||(n=e)},c=[];return s.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var i=0;i<t.length;i++)c.push(t[i])}})),Promise.all([a,o]).then((function(){return n?d("fail").then((function(){throw n})):i?m(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):d("idle").then((function(){return c}))}))}function g(){if(i)return t||(t=[]),Object.keys(r.hmrI).forEach((function(e){i.forEach((function(i){r.hmrI[e](i,t)}))})),i=void 0,!0}r.hmrD=s,r.i.push((function(h){var m,g,v,y,w=h.module,b=function(t,i){var s=a[i];if(!s)return t;var r=function(r){if(s.hot.active){if(a[r]){var o=a[r].parents;-1===o.indexOf(i)&&o.push(i)}else n=[i],e=r;-1===s.children.indexOf(r)&&s.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+i),n=[];return t(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(i){t[e]=i}}};for(var h in t)Object.prototype.hasOwnProperty.call(t,h)&&"e"!==h&&Object.defineProperty(r,h,o(h));return r.e=function(e){return function(e){switch(l){case"ready":d("prepare");case"prepare":return c++,e.then(u,u),e;default:return e}}(t.e(e))},r}(h.require,h.id);w.hot=(m=h.id,g=w,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==m,_requireSelf:function(){n=g.parents.slice(),e=v?void 0:m,r(m)},active:!0,accept:function(e,t,i){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var s=0;s<e.length;s++)y._acceptedDependencies[e[s]]=t||function(){},y._acceptedErrorHandlers[e[s]]=i;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=i},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":t=[],Object.keys(r.hmrI).forEach((function(e){r.hmrI[e](m,t)})),d("ready");break;case"ready":Object.keys(r.hmrI).forEach((function(e){r.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(i=i||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return l;o.push(e)},addStatusHandler:function(e){o.push(e)},removeStatusHandler:function(e){var t=o.indexOf(e);t>=0&&o.splice(t,1)},data:s[m]},e=void 0,y),w.parents=n,w.children=[],n=[],h.require=b})),r.hmrC={},r.hmrI={}})(),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");if(i.length)for(var s=i.length-1;s>-1&&!e;)e=i[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],t=[],i=i=>({dispose:()=>{for(var t=0;t<e.length;t++){var i=e[t];i.parentNode&&i.parentNode.removeChild(i)}e.length=0},apply:()=>{for(var e=0;e<t.length;e++)t[e].rel="stylesheet";t.length=0}});r.hmrC.miniCss=(s,a,n,o,l,c)=>{l.push(i),s.forEach((i=>{var s=r.miniCssF(i),a=r.p+s,n=((e,t)=>{for(var i=document.getElementsByTagName("link"),s=0;s<i.length;s++){var r=(n=i[s]).getAttribute("data-href")||n.getAttribute("href");if("stylesheet"===n.rel&&(r===e||r===t))return n}var a=document.getElementsByTagName("style");for(s=0;s<a.length;s++){var n;if((r=(n=a[s]).getAttribute("data-href"))===e||r===t)return n}})(s,a);n&&o.push(new Promise(((s,r)=>{var o=((e,t,i,s,r)=>{var a=document.createElement("link");return a.rel="stylesheet",a.type="text/css",a.onerror=a.onload=i=>{if(a.onerror=a.onload=null,"load"===i.type)s();else{var n=i&&("load"===i.type?"missing":i.type),o=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+o+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=n,l.request=o,a.parentNode&&a.parentNode.removeChild(a),r(l)}},a.href=t,i?i.parentNode.insertBefore(a,i.nextSibling):document.head.appendChild(a),a})(i,a,n,(()=>{o.as="style",o.rel="preload",s()}),r);e.push(n),t.push(o)})))}))}}})(),(()=>{var e,t,i,s,a,n=r.hmrS_jsonp=r.hmrS_jsonp||{179:0},o={};function l(t,i){return e=i,new Promise(((e,i)=>{o[t]=e;var s=r.p+r.hu(t),a=new Error;r.l(s,(e=>{if(o[t]){o[t]=void 0;var s=e&&("load"===e.type?"missing":e.type),r=e&&e.target&&e.target.src;a.message="Loading hot update chunk "+t+" failed.\n("+s+": "+r+")",a.name="ChunkLoadError",a.type=s,a.request=r,i(a)}}))}))}function c(e){function o(e){for(var t=[e],i={},s=t.map((function(e){return{chain:[e],id:e}}));s.length>0;){var a=s.pop(),n=a.id,o=a.chain,c=r.c[n];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:n};if(c.hot._main)return{type:"unaccepted",chain:o,moduleId:n};for(var h=0;h<c.parents.length;h++){var d=c.parents[h],u=r.c[d];if(u){if(u.hot._declinedDependencies[n])return{type:"declined",chain:o.concat([d]),moduleId:n,parentId:d};-1===t.indexOf(d)&&(u.hot._acceptedDependencies[n]?(i[d]||(i[d]=[]),l(i[d],[n])):(delete i[d],t.push(d),s.push({chain:o.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:i}}function l(e,t){for(var i=0;i<t.length;i++){var s=t[i];-1===e.indexOf(s)&&e.push(s)}}r.f&&delete r.f.jsonpHmr,t=void 0;var c={},h=[],d={},u=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in i)if(r.o(i,p)){var f,m=i[p],g=!1,v=!1,y=!1,w="";switch((f=m?o(p):{type:"disposed",moduleId:p}).chain&&(w="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+f.moduleId+w));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+w));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+w));break;case"accepted":e.onAccepted&&e.onAccepted(f),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(g)return{error:g};if(v)for(p in d[p]=m,l(h,f.outdatedModules),f.outdatedDependencies)r.o(f.outdatedDependencies,p)&&(c[p]||(c[p]=[]),l(c[p],f.outdatedDependencies[p]));y&&(l(h,[f.moduleId]),d[p]=u)}i=void 0;for(var b,E=[],P=0;P<h.length;P++){var k=h[P],S=r.c[k];S&&(S.hot._selfAccepted||S.hot._main)&&d[k]!==u&&!S.hot._selfInvalidated&&E.push({module:k,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;s.forEach((function(e){delete n[e]})),s=void 0;for(var t,i=h.slice();i.length>0;){var a=i.pop(),o=r.c[a];if(o){var l={},d=o.hot._disposeHandlers;for(P=0;P<d.length;P++)d[P].call(null,l);for(r.hmrD[a]=l,o.hot.active=!1,delete r.c[a],delete c[a],P=0;P<o.children.length;P++){var u=r.c[o.children[P]];u&&(e=u.parents.indexOf(a))>=0&&u.parents.splice(e,1)}}}for(var p in c)if(r.o(c,p)&&(o=r.c[p]))for(b=c[p],P=0;P<b.length;P++)t=b[P],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(t){for(var i in d)r.o(d,i)&&(r.m[i]=d[i]);for(var s=0;s<a.length;s++)a[s](r);for(var n in c)if(r.o(c,n)){var o=r.c[n];if(o){b=c[n];for(var l=[],u=[],p=[],f=0;f<b.length;f++){var m=b[f],g=o.hot._acceptedDependencies[m],v=o.hot._acceptedErrorHandlers[m];if(g){if(-1!==l.indexOf(g))continue;l.push(g),u.push(v),p.push(m)}}for(var y=0;y<l.length;y++)try{l[y].call(null,b)}catch(i){if("function"==typeof u[y])try{u[y](i,{moduleId:n,dependencyId:p[y]})}catch(s){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:n,dependencyId:p[y],error:s,originalError:i}),e.ignoreErrored||(t(s),t(i))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:n,dependencyId:p[y],error:i}),e.ignoreErrored||t(i)}}}for(var w=0;w<E.length;w++){var P=E[w],k=P.module;try{P.require(k)}catch(i){if("function"==typeof P.errorHandler)try{P.errorHandler(i,{moduleId:k,module:r.c[k]})}catch(s){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:s,originalError:i}),e.ignoreErrored||(t(s),t(i))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:k,error:i}),e.ignoreErrored||t(i)}}return h}}}self.webpackHotUpdatediploma_advantage_js_retrogame=(t,s,n)=>{for(var l in s)r.o(s,l)&&(i[l]=s[l],e&&e.push(l));n&&a.push(n),o[t]&&(o[t](),o[t]=void 0)},r.hmrI.jsonp=function(e,t){i||(i={},a=[],s=[],t.push(c)),r.o(i,e)||(i[e]=r.m[e])},r.hmrC.jsonp=function(e,o,h,d,u,p){u.push(c),t={},s=o,i=h.reduce((function(e,t){return e[t]=!1,e}),{}),a=[],e.forEach((function(e){r.o(n,e)&&void 0!==n[e]?(d.push(l(e,p)),t[e]=!0):t[e]=!1})),r.f&&(r.f.jsonpHmr=function(e,i){t&&r.o(t,e)&&!t[e]&&(i.push(l(e)),t[e]=!0)})},r.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(r.p+r.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),r(586)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,